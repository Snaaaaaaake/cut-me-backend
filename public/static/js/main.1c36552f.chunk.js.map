{"version":3,"sources":["constants/siteUrl.ts","service/LinkService.ts","components/Context/ServiceContext.ts","components/Layout/Layout.tsx","store/initialStates.ts","components/Spinner/Spinner.tsx","components/ErrorComponent/ErrorComponent.tsx","actions/action.ts","components/RegisterForm/RegisterForm.tsx","components/LoginForm/LoginForm.tsx","components/UserCard/UserCard.tsx","components/Head/Head.tsx","components/AddLinkForm/AddLinkForm.tsx","components/MainPage/MainPage.tsx","utils/dateFormatter.ts","components/LinkElement/LinkElement.tsx","components/TableComponent/TableComponent.tsx","components/LinksPage/LinksPage.tsx","components/NotFoundPage/NotFoundPage.tsx","components/App/App.tsx","reducers/userReducer.ts","reducers/linksReducer.ts","reducers/rootReducer.ts","store/store.ts","index.tsx"],"names":["process","headers","resCheck","res","a","ok","json","LinkService","apiUrl","usersUrl","linksUrl","this","siteUrl","fetch","credentials","then","name","email","password","method","body","JSON","stringify","url","owner","title","short","_id","array","ServiceContext","createContext","Layout","props","Container","maxWidth","Paper","elevation","children","FormRegistrationInitialState","passwordAgain","isLoading","error","FormLoginInitialState","FormAddLinkInitialState","link","FormEditLinkInitialState","isEditing","editValue","ModalStateInitialState","isModalOpened","modalContent","initialUserState","user","initialLinksState","links","initialFilterState","sorterType","isAscending","Spinner","Box","p","display","justifyContent","CircularProgress","ErrorComponent","style","color","Typography","variant","component","message","fetchUserRequestAction","type","fetchUserSuccessAction","data","payload","fetchLinksSuccessAction","fetchLinksFailureAction","err","useStyles","makeStyles","createStyles","root","border","formContainer","padding","flexWrap","mapDispatchToProps","connector","connect","linkService","useContext","classes","useState","initialState","formState","setFormState","closeHandler","onChangeInputHandler","event","preventDefault","target","id","value","mt","align","className","onSubmit","currentTarget","checkValidity","userSignUp","alert","catch","e","disabled","TextField","onChange","label","helperText","fullWidth","margin","required","inputProps","pattern","minLength","maxLength","Button","userSignIn","fetchUserFailureAction","state","userState","history","useHistory","onClick","userSignOut","push","modal","alignItems","overflowY","modalContainer","position","modalCloseButton","top","right","borderRadius","location","useLocation","modalState","setModalState","handleModalOpen","element","handleModalClose","UserComponent","pathname","includes","UserCard","mb","Modal","disableAutoFocus","disableEnforceFocus","open","onClose","size","copyLinkElements","inputRef","changeInputHandler","pt","pb","readOnly","select","document","execCommand","textContent","addLink","hash","MainPage","addZero","date","theme","textTransform","palette","text","secondary","fontWeight","textAlign","cell","store","counter","checkboxIsChecked","checkboxHandler","hashedLink","editButtonHandler","EditFormElement","editLink","getLinks","autoFocus","placeholder","TableRow","TableCell","colSpan","Checkbox","checked","length","slice","elem","createElement","appendChild","removeChild","strDate","rawDate","Date","getDate","getMonth","getFullYear","dateFormatter","window","confirm","removeLink","button","fetchLinksRequestAction","linksState","formCheckboxState","setFormCheckboxState","sorterState","setSorterState","allCheckboxesAreChecked","sortedLinks","sort","b","sortByType","item1","getTime","item2","toLowerCase","FilterButton","buttonType","arrow","sorterHandler","useEffect","sorterButtonType","filter","i","Table","stickyHeader","TableHead","newState","map","TableBody","indexOf","key","py","removeLinkMany","LinksPage","NotFoundPage","linkSrvice","getUser","path","exact","userReducer","action","rootReducer","combineReducers","linksReducer","createStore","dotenv","config","ReactDOM","render","StrictMode","Provider","getElementById"],"mappings":"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","file":"static/js/main.1c36552f.chunk.js","sourcesContent":["export default process.env.REACT_APP_SITE_URL;\r\n","import { ServiceTypes } from \"../types/appTypes\";\r\nimport siteUrl from \"../constants/siteUrl\";\r\n\r\nconst headers = { \"Content-Type\": \"application/json\" };\r\nasync function resCheck(res: Response) {\r\n  if (res.ok) {\r\n    return res.json();\r\n  } else {\r\n    throw await res.json();\r\n  }\r\n}\r\n\r\nexport default class LinkService {\r\n  private apiUrl: string;\r\n  private usersUrl: string;\r\n  private linksUrl: string;\r\n  constructor(apiUrl?: string) {\r\n    this.apiUrl = apiUrl || siteUrl;\r\n    this.usersUrl = `${this.apiUrl}/usersApi`;\r\n    this.linksUrl = `${this.apiUrl}/linksApi`;\r\n  }\r\n\r\n  public getUser(): Promise<ServiceTypes.IServerResponseUser> {\r\n    return fetch(`${this.usersUrl}/me`, {\r\n      headers,\r\n      credentials: \"include\",\r\n    }).then(resCheck);\r\n  }\r\n\r\n  public userSignUp(\r\n    name: string,\r\n    email: string,\r\n    password: string\r\n  ): Promise<ServiceTypes.IServerResponseUser> {\r\n    return fetch(`${this.usersUrl}/signup`, {\r\n      method: \"post\",\r\n      headers,\r\n      body: JSON.stringify({\r\n        email,\r\n        password,\r\n        name,\r\n      }),\r\n    }).then(resCheck);\r\n  }\r\n\r\n  public userSignIn(password: string, email: string): Promise<ServiceTypes.IServerResponseUser> {\r\n    return fetch(`${this.usersUrl}/signin`, {\r\n      method: \"post\",\r\n      headers,\r\n      body: JSON.stringify({\r\n        email,\r\n        password,\r\n      }),\r\n    }).then(resCheck);\r\n  }\r\n\r\n  public userSignOut(): Promise<ServiceTypes.IserverResponseStatus> {\r\n    return fetch(`${this.usersUrl}/signout`, {\r\n      headers,\r\n      credentials: \"include\",\r\n    }).then(resCheck);\r\n  }\r\n\r\n  public addLink(\r\n    url: string,\r\n    owner: string | null,\r\n    title: string,\r\n    short: string\r\n  ): Promise<ServiceTypes.IServerResponseLink[]> {\r\n    return fetch(`${this.linksUrl}/add`, {\r\n      method: \"post\",\r\n      headers,\r\n      body: JSON.stringify({\r\n        url,\r\n        title,\r\n        short,\r\n        owner,\r\n      }),\r\n    }).then(resCheck);\r\n  }\r\n\r\n  public getLinks(_id: string): Promise<ServiceTypes.IServerResponseLink[]> {\r\n    return fetch(`${this.linksUrl}/get`, {\r\n      method: \"post\",\r\n      credentials: \"include\",\r\n      headers,\r\n      body: JSON.stringify({\r\n        owner: _id,\r\n      }),\r\n    }).then(resCheck);\r\n  }\r\n\r\n  public removeLink(_id: string): Promise<ServiceTypes.IserverResponseStatus> {\r\n    return fetch(`${this.linksUrl}/remove`, {\r\n      method: \"delete\",\r\n      credentials: \"include\",\r\n      headers,\r\n      body: JSON.stringify({\r\n        _id,\r\n      }),\r\n    }).then(resCheck);\r\n  }\r\n\r\n  public removeLinkMany(array: string[]): Promise<ServiceTypes.IserverResponseStatus> {\r\n    return fetch(`${this.linksUrl}/removeMany`, {\r\n      method: \"delete\",\r\n      credentials: \"include\",\r\n      headers,\r\n      body: JSON.stringify({\r\n        array,\r\n      }),\r\n    }).then(resCheck);\r\n  }\r\n\r\n  public editLink(_id: string, title: string): Promise<ServiceTypes.IServerResponseLink[]> {\r\n    return fetch(`${this.linksUrl}/edit`, {\r\n      method: \"post\",\r\n      credentials: \"include\",\r\n      headers,\r\n      body: JSON.stringify({\r\n        _id,\r\n        title,\r\n      }),\r\n    }).then(resCheck);\r\n  }\r\n}\r\n","import { createContext } from \"react\";\r\nimport LinkService from \"../../service/LinkService\";\r\n\r\nconst ServiceContext = createContext<LinkService | null>(null);\r\n\r\nexport default ServiceContext;\r\n","import React from \"react\";\r\nimport { Container, Paper } from \"@material-ui/core\";\r\nimport { LayoutPropsType } from \"../../types/appTypes\";\r\n\r\nconst Layout: React.FC<LayoutPropsType> = (props) => {\r\n  return (\r\n    <Container maxWidth=\"md\">\r\n      <Paper elevation={3}>{props.children}</Paper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","import { ComponentStatesTypes, StoreStatesTypes } from \"../types/reduxTypes\";\r\n\r\nexport const FormRegistrationInitialState: ComponentStatesTypes.IFormRegistrationState = {\r\n  name: \"\",\r\n  password: \"\",\r\n  passwordAgain: \"\",\r\n  email: \"\",\r\n  isLoading: false,\r\n  error: null,\r\n};\r\n\r\nexport const FormLoginInitialState: ComponentStatesTypes.IFormLoginState = {\r\n  password: \"\",\r\n  email: \"\",\r\n  isLoading: false,\r\n  error: null,\r\n};\r\n\r\nexport const FormAddLinkInitialState: ComponentStatesTypes.IFormAddlinkState = {\r\n  url: \"\",\r\n  title: \"\",\r\n  owner: \"\",\r\n  short: \"\",\r\n  isLoading: false,\r\n  error: null,\r\n  link: null,\r\n};\r\n\r\nexport const FormEditLinkInitialState: ComponentStatesTypes.IFormEditLinkState = {\r\n  isEditing: false,\r\n  editValue: \"\",\r\n  isLoading: false,\r\n};\r\n\r\nexport const ModalStateInitialState: ComponentStatesTypes.IModalState = {\r\n  isModalOpened: false,\r\n  modalContent: \"\",\r\n};\r\n\r\nexport const initialUserState: StoreStatesTypes.IUserState = {\r\n  user: null,\r\n  error: null,\r\n  isLoading: false,\r\n};\r\n\r\nexport const initialLinksState: StoreStatesTypes.ILinksState = {\r\n  links: [],\r\n  error: null,\r\n  isLoading: false,\r\n};\r\n\r\nexport const initialFilterState: ComponentStatesTypes.IFilterState = {\r\n  sorterType: \"date\",\r\n  isAscending: false,\r\n};\r\n","import React from \"react\";\r\nimport { Box, CircularProgress } from \"@material-ui/core\";\r\n\r\nconst Spinner: React.FC = () => {\r\n  return (\r\n    <Box p={3} display=\"flex\" justifyContent=\"center\">\r\n      <CircularProgress />\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default Spinner;\r\n","import React from \"react\";\r\nimport { Box, Typography } from \"@material-ui/core\";\r\n\r\ntype PropsType = {\r\n  error: Error;\r\n};\r\n\r\nconst ErrorComponent: React.FC<PropsType> = (props) => {\r\n  const { error } = props;\r\n  return (\r\n    <Box p={4} style={{ color: \"red\" }}>\r\n      <Typography variant=\"body1\" component=\"p\">\r\n        {error.message}\r\n      </Typography>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default ErrorComponent;\r\n","import { IAction } from \"../types/reduxTypes\";\r\nimport { actionCreatorType } from \"../types/reduxTypes\";\r\n\r\nconst fetchUserRequestAction: actionCreatorType = (): IAction => ({\r\n  type: \"FETCH_USER_REQUEST\",\r\n});\r\n\r\nconst fetchUserSuccessAction: actionCreatorType = (data): IAction => ({\r\n  type: \"FETCH_USER_SUCCESS\",\r\n  payload: data,\r\n});\r\n\r\nconst fetchUserFailureAction: actionCreatorType = (err): IAction => ({\r\n  type: \"FETCH_USER_FAILURE\",\r\n  payload: err,\r\n});\r\n\r\nconst fetchLinksRequestAction: actionCreatorType = (): IAction => ({\r\n  type: \"FETCH_LINKS_REQUEST\",\r\n});\r\n\r\nconst fetchLinksSuccessAction: actionCreatorType = (data): IAction => ({\r\n  type: \"FETCH_LINKS_SUCCESS\",\r\n  payload: data,\r\n});\r\n\r\nconst fetchLinksFailureAction: actionCreatorType = (err): IAction => ({\r\n  type: \"FETCH_LINKS_FAILURE\",\r\n  payload: err,\r\n});\r\n\r\nexport {\r\n  fetchUserRequestAction,\r\n  fetchUserSuccessAction,\r\n  fetchUserFailureAction,\r\n  fetchLinksRequestAction,\r\n  fetchLinksSuccessAction,\r\n  fetchLinksFailureAction,\r\n};\r\n","import React, { useState, useContext } from \"react\";\r\nimport { connect, ConnectedProps } from \"react-redux\";\r\nimport { TextField, Typography, Button, Box } from \"@material-ui/core\";\r\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport ServiceContext from \"../Context/ServiceContext\";\r\nimport { FormRegistrationInitialState as initialState } from \"../../store/initialStates\";\r\nimport { ComponentStatesTypes } from \"../../types/reduxTypes\";\r\nimport { fetchUserSuccessAction } from \"../../actions/action\";\r\n\r\nconst useStyles = makeStyles(() =>\r\n  createStyles({\r\n    root: {\r\n      border: \"none\",\r\n    },\r\n    formContainer: {\r\n      padding: \"15px\",\r\n      display: \"flex\",\r\n      flexWrap: \"wrap\",\r\n      border: \"none\",\r\n    },\r\n  })\r\n);\r\n\r\ntype PropsType = PropsFromRedux & {\r\n  closeHandler: () => void;\r\n};\r\n\r\nconst RegisterForm: React.FC<PropsType> = (props) => {\r\n  const linkService = useContext(ServiceContext)!;\r\n  const classes = useStyles();\r\n  const [formState, setFormState] = useState<ComponentStatesTypes.IFormRegistrationState>({\r\n    ...initialState,\r\n  });\r\n  const { name, password, passwordAgain, email, isLoading, error } = formState;\r\n  const { fetchUserSuccessAction, closeHandler } = props;\r\n  const onChangeInputHandler = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    event.preventDefault();\r\n    setFormState({\r\n      ...formState,\r\n      [event.target.id]: event.target.value,\r\n    });\r\n  };\r\n\r\n  const onSubmitSignUpHandler = (event: React.FormEvent<HTMLFormElement>): void => {\r\n    event.preventDefault();\r\n    if (event.currentTarget.checkValidity()) {\r\n      if (password !== passwordAgain) {\r\n        setFormState({ ...formState, error: \"Пароли не совпадают!\" });\r\n      } else {\r\n        setFormState({ ...formState, isLoading: true });\r\n        linkService\r\n          .userSignUp(name, email, password)\r\n          .then((data) => {\r\n            fetchUserSuccessAction(data);\r\n            setFormState({ ...initialState });\r\n            alert(\"Пользователь создан, вход выполнен\");\r\n            closeHandler();\r\n          })\r\n          .catch((e) => setFormState({ ...formState, error: e.message }));\r\n      }\r\n    } else {\r\n      setFormState({\r\n        ...formState,\r\n        error: \"Проверьте правильность заполнения формы!\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box mt={3}>\r\n        <Typography variant=\"h6\" align=\"center\" component=\"h5\">\r\n          Зарегистрироваться\r\n        </Typography>\r\n      </Box>\r\n      <form className={classes.root} onSubmit={onSubmitSignUpHandler}>\r\n        <fieldset className={classes.formContainer} disabled={isLoading}>\r\n          <TextField\r\n            onChange={onChangeInputHandler}\r\n            id=\"name\"\r\n            label=\"Имя пользователя\"\r\n            helperText=\"Допускаются буквы и цифры\"\r\n            fullWidth\r\n            margin=\"normal\"\r\n            required\r\n            type=\"text\"\r\n            value={name}\r\n            inputProps={{\r\n              pattern: \"[а-яА-ЯёЁA-Za-z0-9-_\\\\s]*\",\r\n              minLength: 2,\r\n              maxLength: 25,\r\n            }}\r\n          />\r\n          <TextField\r\n            onChange={onChangeInputHandler}\r\n            id=\"email\"\r\n            label=\"Email\"\r\n            helperText=\"Электронная почта\"\r\n            fullWidth\r\n            margin=\"normal\"\r\n            required\r\n            type=\"email\"\r\n            value={email}\r\n          />\r\n          <TextField\r\n            onChange={onChangeInputHandler}\r\n            id=\"password\"\r\n            label=\"Пароль\"\r\n            helperText=\"Минимум шесть символов\"\r\n            fullWidth\r\n            margin=\"normal\"\r\n            required\r\n            type=\"password\"\r\n            value={password}\r\n            inputProps={{ pattern: \"[^<>s]*\", minLength: 6 }}\r\n          />\r\n          <TextField\r\n            onChange={onChangeInputHandler}\r\n            id=\"passwordAgain\"\r\n            label=\"Повторите пароль\"\r\n            fullWidth\r\n            margin=\"normal\"\r\n            required\r\n            type=\"password\"\r\n            value={passwordAgain}\r\n          />\r\n\r\n          <Typography style={{ color: \"red\" }} variant=\"subtitle1\">\r\n            {error}\r\n          </Typography>\r\n          <Box mt={3}>\r\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n              Зарегистрироваться\r\n            </Button>\r\n          </Box>\r\n        </fieldset>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  fetchUserSuccessAction,\r\n};\r\n\r\nconst connector = connect(null, mapDispatchToProps);\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\nexport default connector(RegisterForm);\r\n","import React, { useState, useContext } from \"react\";\r\nimport { connect, ConnectedProps } from \"react-redux\";\r\nimport { TextField, Typography, Button, Box } from \"@material-ui/core\";\r\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport ServiceContext from \"../Context/ServiceContext\";\r\nimport { FormLoginInitialState as initialState } from \"../../store/initialStates\";\r\nimport { ComponentStatesTypes } from \"../../types/reduxTypes\";\r\nimport { fetchUserSuccessAction } from \"../../actions/action\";\r\n\r\nconst useStyles = makeStyles(() =>\r\n  createStyles({\r\n    root: {\r\n      border: \"none\",\r\n    },\r\n    formContainer: {\r\n      padding: \"15px\",\r\n      display: \"flex\",\r\n      flexWrap: \"wrap\",\r\n      border: \"none\",\r\n    },\r\n  })\r\n);\r\n\r\ntype PropsType = PropsFromRedux & {\r\n  closeHandler: () => void;\r\n};\r\n\r\nconst LoginForm: React.FC<PropsType> = (props) => {\r\n  const linkService = useContext(ServiceContext)!;\r\n  const classes = useStyles();\r\n  const [formState, setFormState] = useState<ComponentStatesTypes.IFormLoginState>({\r\n    ...initialState,\r\n  });\r\n  const { password, email, isLoading, error } = formState;\r\n  const { fetchUserSuccessAction, closeHandler } = props;\r\n\r\n  const onChangeInputHandler = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    event.preventDefault();\r\n    setFormState({\r\n      ...formState,\r\n      [event.target.id]: event.target.value,\r\n    });\r\n  };\r\n\r\n  const onSubmitSignInHandler = (event: React.FormEvent<HTMLFormElement>) => {\r\n    event.preventDefault();\r\n    if (event.currentTarget.checkValidity()) {\r\n      setFormState({ ...formState, isLoading: true });\r\n      linkService\r\n        .userSignIn(password, email)\r\n        .then((data) => {\r\n          fetchUserSuccessAction(data);\r\n          setFormState({ ...initialState });\r\n          alert(\"Вход выполнен успешно!\");\r\n          closeHandler();\r\n        })\r\n        .catch((e) => setFormState({ ...formState, error: e.message }));\r\n    } else {\r\n      setFormState({\r\n        ...formState,\r\n        error: \"Проверьте правильность заполнения формы!\",\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Box mt={2}>\r\n        <Typography variant=\"h6\" align=\"center\" component=\"h5\">\r\n          Войти\r\n        </Typography>\r\n      </Box>\r\n\r\n      <form className={classes.root} onSubmit={onSubmitSignInHandler}>\r\n        <fieldset className={classes.formContainer} disabled={isLoading}>\r\n          <TextField\r\n            onChange={onChangeInputHandler}\r\n            id=\"email\"\r\n            label=\"Email\"\r\n            helperText=\"Электронная почта\"\r\n            fullWidth\r\n            margin=\"normal\"\r\n            required\r\n            type=\"email\"\r\n            value={email}\r\n          />\r\n          <TextField\r\n            onChange={onChangeInputHandler}\r\n            id=\"password\"\r\n            label=\"Пароль\"\r\n            fullWidth\r\n            margin=\"normal\"\r\n            required\r\n            type=\"password\"\r\n            value={password}\r\n          />\r\n          <Typography style={{ color: \"red\" }} variant=\"subtitle1\">\r\n            {error}\r\n          </Typography>\r\n          <Box mt={3}>\r\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n              Войти\r\n            </Button>\r\n          </Box>\r\n        </fieldset>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  fetchUserSuccessAction,\r\n};\r\n\r\nconst connector = connect(null, mapDispatchToProps);\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\nexport default connector(LoginForm);\r\n","import React, { useContext } from \"react\";\r\nimport { connect, ConnectedProps } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Box, Button, Typography } from \"@material-ui/core\";\r\nimport ServiceContext from \"../Context/ServiceContext\";\r\nimport { StoreStatesTypes } from \"../../types/reduxTypes\";\r\nimport ErrorComponent from \"../ErrorComponent/ErrorComponent\";\r\nimport Spinner from \"../Spinner/Spinner\";\r\nimport { fetchUserRequestAction, fetchUserSuccessAction, fetchUserFailureAction } from \"../../actions/action\";\r\n\r\ntype PropsType = PropsFromRedux & {\r\n  closeHandler: () => void;\r\n};\r\n\r\nconst MainPage: React.FC<PropsType> = (props) => {\r\n  const history = useHistory();\r\n  const linkService = useContext(ServiceContext)!;\r\n  const {\r\n    fetchUserRequestAction,\r\n    fetchUserSuccessAction,\r\n    fetchUserFailureAction,\r\n    closeHandler,\r\n    userState: { user, error, isLoading },\r\n  } = props;\r\n\r\n  const logOutHandler = (): void => {\r\n    fetchUserRequestAction();\r\n    linkService\r\n      .userSignOut()\r\n      .then(() => {\r\n        fetchUserSuccessAction(null);\r\n        alert(\"Вы вышли из своего аккаунта\");\r\n        closeHandler();\r\n        history.push(\"/\");\r\n      })\r\n      .catch(fetchUserFailureAction);\r\n  };\r\n\r\n  if (error) {\r\n    return <ErrorComponent error={error} />;\r\n  } else if (isLoading) {\r\n    return <Spinner />;\r\n  } else if (user) {\r\n    return (\r\n      <>\r\n        <Box p={2}>\r\n          <Typography variant=\"h6\" component=\"h5\">\r\n            Пользователь\r\n          </Typography>\r\n        </Box>\r\n        <Box p={2}>\r\n          <Typography variant=\"body1\" component=\"p\">\r\n            Имя: {user.name}\r\n          </Typography>\r\n          <Typography variant=\"body1\" component=\"p\">\r\n            Почта: {user.email}\r\n          </Typography>\r\n        </Box>\r\n        <Box p={2} display=\"flex\" justifyContent=\"center\">\r\n          <Button onClick={logOutHandler} variant=\"contained\" color=\"primary\">\r\n            Выйти\r\n          </Button>\r\n        </Box>\r\n      </>\r\n    );\r\n  } else {\r\n    return <div>Требуется регистрация</div>;\r\n  }\r\n};\r\nconst mapStateToProps = (state: StoreStatesTypes.StoreStateType) => ({\r\n  userState: state.userState,\r\n});\r\nconst mapDispatchToProps = {\r\n  fetchUserRequestAction,\r\n  fetchUserSuccessAction,\r\n  fetchUserFailureAction,\r\n};\r\n\r\nconst connector = connect(mapStateToProps, mapDispatchToProps);\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\nexport default connector(MainPage);\r\n","import React, { useState } from \"react\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport { connect, ConnectedProps } from \"react-redux\";\r\nimport { Box, Button, Modal, Paper } from \"@material-ui/core\";\r\nimport { makeStyles, createStyles } from \"@material-ui/core/styles\";\r\nimport { StoreStatesTypes } from \"../../types/reduxTypes\";\r\nimport { LayoutPropsType } from \"../../types/appTypes\";\r\nimport { ModalStateInitialState as initialState } from \"../../store/initialStates\";\r\nimport Spinner from \"../Spinner/Spinner\";\r\nimport ErrorComponent from \"../ErrorComponent/ErrorComponent\";\r\n\r\nimport RegisterForm from \"../RegisterForm/RegisterForm\";\r\nimport LoginForm from \"../LoginForm/LoginForm\";\r\nimport UserCard from \"../UserCard/UserCard\";\r\n\r\nconst useStyles = makeStyles(() =>\r\n  createStyles({\r\n    modal: {\r\n      display: \"grid\",\r\n      alignItems: \"center\",\r\n      justifyContent: \"center\",\r\n      overflowY: \"auto\",\r\n    },\r\n    modalContainer: {\r\n      position: \"relative\",\r\n    },\r\n    modalCloseButton: {\r\n      position: \"absolute\",\r\n      top: \"0px\",\r\n      right: \"-15px\",\r\n      borderRadius: \"50px\",\r\n    },\r\n  })\r\n);\r\n\r\ntype PropsType = PropsFromRedux & LayoutPropsType;\r\n\r\nconst Head: React.FC<PropsType> = (props) => {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n  const [modalState, setModalState] = useState({\r\n    ...initialState,\r\n  });\r\n  const { isModalOpened, modalContent } = modalState;\r\n  const { user, isLoading, error } = props.userState;\r\n\r\n  const handleModalOpen = (element: JSX.Element): React.MouseEventHandler => (): void => {\r\n    setModalState({ isModalOpened: true, modalContent: element });\r\n  };\r\n\r\n  const handleModalClose = (): void => {\r\n    setModalState({ ...initialState });\r\n  };\r\n\r\n  const UserComponent: React.FC = () =>\r\n    isLoading ? (\r\n      <Spinner />\r\n    ) : error ? (\r\n      <ErrorComponent error={error} />\r\n    ) : user ? (\r\n      <>\r\n        {location.pathname.includes(\"user/links\") ? (\r\n          <Button onClick={() => history.push(\"/\")} color=\"primary\">\r\n            На главную\r\n          </Button>\r\n        ) : (\r\n          <Button onClick={() => history.push(\"/user/links\")} color=\"primary\">\r\n            Мои ссылки\r\n          </Button>\r\n        )}\r\n        <Button onClick={handleModalOpen(<UserCard closeHandler={handleModalClose} />)} color=\"primary\">\r\n          Мой профиль\r\n        </Button>\r\n      </>\r\n    ) : (\r\n      <>\r\n        <Button onClick={handleModalOpen(<LoginForm closeHandler={handleModalClose} />)} color=\"primary\">\r\n          Войти\r\n        </Button>\r\n        <Button onClick={handleModalOpen(<RegisterForm closeHandler={handleModalClose} />)} color=\"primary\">\r\n          Зарегистрироваться\r\n        </Button>\r\n      </>\r\n    );\r\n  return (\r\n    <>\r\n      <Box p={1} display=\"flex\" justifyContent=\"flex-end\" flexWrap=\"wrap\">\r\n        <UserComponent />\r\n      </Box>\r\n      <Box mb={5}>{props.children}</Box>\r\n      <Modal\r\n        disableAutoFocus={true}\r\n        disableEnforceFocus={true}\r\n        className={classes.modal}\r\n        open={isModalOpened}\r\n        onClose={handleModalClose}\r\n      >\r\n        <Paper className={classes.modalContainer} elevation={2}>\r\n          <Button\r\n            className={classes.modalCloseButton}\r\n            size=\"small\"\r\n            title=\"Закрыть\"\r\n            onClick={handleModalClose}\r\n            color=\"primary\"\r\n          >\r\n            X\r\n          </Button>\r\n          {modalContent}\r\n        </Paper>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: StoreStatesTypes.StoreStateType) => ({\r\n  userState: state.userState,\r\n});\r\n\r\nconst connector = connect(mapStateToProps);\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\nexport default connector(Head);\r\n","import React, { useState, useContext } from \"react\";\r\nimport { connect, ConnectedProps } from \"react-redux\";\r\nimport ServiceContext from \"../Context/ServiceContext\";\r\nimport { ComponentStatesTypes } from \"../../types/reduxTypes\";\r\nimport { FormAddLinkInitialState } from \"../../store/initialStates\";\r\nimport { StoreStatesTypes } from \"../../types/reduxTypes\";\r\nimport siteUrl from \"../../constants/siteUrl\";\r\n\r\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport { TextField, Typography, Button, Box } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles(() =>\r\n  createStyles({\r\n    root: {\r\n      border: \"none\",\r\n    },\r\n    formContainer: {\r\n      padding: \"15px\",\r\n      display: \"flex\",\r\n      flexWrap: \"wrap\",\r\n      border: \"none\",\r\n    },\r\n    copyLinkElements: {\r\n      margin: \"5px\",\r\n    },\r\n  })\r\n);\r\n\r\nconst AddLinkForm: React.FC<PropsFromRedux> = (props) => {\r\n  const linkService = useContext(ServiceContext)!;\r\n  const classes = useStyles();\r\n  const [formState, setFormState] = useState<ComponentStatesTypes.IFormAddlinkState>({\r\n    ...FormAddLinkInitialState,\r\n  });\r\n  let inputRef: HTMLInputElement;\r\n  const { url, title, short, error, isLoading, link } = formState;\r\n  const owner = props.userState.user ? props.userState.user._id : null;\r\n\r\n  const changeInputHandler = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    event.preventDefault();\r\n    setFormState({\r\n      ...formState,\r\n      [event.target.id]: event.target.value,\r\n    });\r\n  };\r\n\r\n  const submitFormHandler = (event: React.FormEvent<HTMLFormElement>): void => {\r\n    event.preventDefault();\r\n    if (event.currentTarget.checkValidity()) {\r\n      setFormState({ ...formState, isLoading: true });\r\n      linkService\r\n        .addLink(url, owner, title, short)\r\n        .then((data) => {\r\n          setFormState({\r\n            ...FormAddLinkInitialState,\r\n            link: `${siteUrl}/${data[0].hash}`,\r\n          });\r\n        })\r\n        .catch((e) => setFormState({ ...formState, isLoading: false, error: e.message }));\r\n    } else {\r\n      setFormState({\r\n        ...formState,\r\n        error: \"Проверьте правильность заполнения формы!\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const copyButtonHandler = (event: React.MouseEvent<HTMLButtonElement>): void => {\r\n    inputRef.select();\r\n    document.execCommand(\"copy\");\r\n    event.currentTarget.textContent = \"Скопировано!\";\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {link && (\r\n        <Box pt={3} pb={2} display=\"flex\" justifyContent=\"center\" flexWrap=\"wrap\">\r\n          <TextField\r\n            label=\"Ваша ссылка\"\r\n            inputProps={{ readOnly: true }}\r\n            value={link}\r\n            inputRef={(e) => (inputRef = e)}\r\n            variant=\"outlined\"\r\n            size=\"small\"\r\n            className={classes.copyLinkElements}\r\n          />\r\n          <Button\r\n            onClick={copyButtonHandler}\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            className={classes.copyLinkElements}\r\n          >\r\n            Скопировать\r\n          </Button>\r\n        </Box>\r\n      )}\r\n      <form className={classes.root} onSubmit={submitFormHandler}>\r\n        <fieldset className={classes.formContainer} disabled={isLoading}>\r\n          <TextField\r\n            onChange={changeInputHandler}\r\n            id=\"url\"\r\n            label=\"Ссылка\"\r\n            helperText=\"Ссылка, которую вы хотите сократить\"\r\n            fullWidth\r\n            margin=\"normal\"\r\n            required\r\n            size=\"medium\"\r\n            type=\"text\"\r\n            value={url}\r\n            inputProps={{ pattern: \"[^<>]*\" }}\r\n          />\r\n          <TextField\r\n            onChange={changeInputHandler}\r\n            id=\"title\"\r\n            label=\"Название\"\r\n            helperText=\"Название, которое вы будете видеть в своём аккаунте\"\r\n            fullWidth\r\n            margin=\"normal\"\r\n            type=\"text\"\r\n            size=\"small\"\r\n            value={title}\r\n            inputProps={{ pattern: \"[а-яА-ЯёЁA-Za-z0-9-_\\\\s]*\" }}\r\n          />\r\n          <TextField\r\n            onChange={changeInputHandler}\r\n            id=\"short\"\r\n            label=\"Сокращенный текст\"\r\n            helperText=\"Будет добавлен в сокращенную версию ссылки, допускаются латинские\r\n            буквы и цифры\"\r\n            fullWidth\r\n            size=\"small\"\r\n            margin=\"normal\"\r\n            type=\"text\"\r\n            value={short}\r\n            inputProps={{ pattern: \"[A-Za-z0-9]*\" }}\r\n          />\r\n          <Typography style={{ color: \"red\" }} variant=\"subtitle1\">\r\n            {error}\r\n          </Typography>\r\n\r\n          <Box mt={3}>\r\n            <Button type=\"submit\" variant=\"contained\" color=\"primary\">\r\n              Добавить\r\n            </Button>\r\n          </Box>\r\n        </fieldset>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state: StoreStatesTypes.StoreStateType) => ({\r\n  userState: state.userState,\r\n});\r\n\r\nconst connector = connect(mapStateToProps);\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\nexport default connector(AddLinkForm);\r\n","import React from \"react\";\r\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport { Typography, Container } from \"@material-ui/core\";\r\nimport Layout from \"../Layout/Layout\";\r\nimport Head from \"../Head/Head\";\r\nimport AddLinkForm from \"../AddLinkForm/AddLinkForm\";\r\n\r\nconst useStyles = makeStyles(() =>\r\n  createStyles({\r\n    title: {\r\n      margin: \"10px\",\r\n    },\r\n  })\r\n);\r\n\r\nconst MainPage: React.FC = () => {\r\n  const classes = useStyles();\r\n  return (\r\n    <>\r\n      <Head>\r\n        <Container maxWidth=\"lg\">\r\n          <Typography variant=\"h3\" className={classes.title} align=\"center\" component=\"h1\">\r\n            Сократитель ссылок\r\n          </Typography>\r\n          <Typography variant=\"body1\" className={classes.title} align=\"center\">\r\n            Сервис предназначен для сокращения длинных ссылок. Есть возможность завести аккаунт и отслеживать\r\n            в нём активность ссылок. Это тренировочный проект, поэтому всё условно ;)\r\n          </Typography>\r\n        </Container>\r\n      </Head>\r\n      <Layout>\r\n        <AddLinkForm />\r\n      </Layout>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","function addZero(date: number): string {\r\n  return date < 10 ? `0${date}` : `${date}`;\r\n}\r\n\r\nexport default function dateFormatter(strDate: string): string {\r\n  const rawDate = new Date(strDate);\r\n  return `${addZero(rawDate.getDate())}.${addZero(rawDate.getMonth() + 1)}.${rawDate.getFullYear()}`;\r\n}\r\n","import React, { useContext, useState } from \"react\";\r\nimport { connect, ConnectedProps } from \"react-redux\";\r\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\r\nimport { TableRow, TableCell, Typography, Button, Checkbox, TextField, Box } from \"@material-ui/core\";\r\nimport ServiceContext from \"../Context/ServiceContext\";\r\nimport { ServiceTypes } from \"../../types/appTypes\";\r\nimport { StoreStatesTypes } from \"../../types/reduxTypes\";\r\nimport { FormEditLinkInitialState as initialState } from \"../../store/initialStates\";\r\nimport { fetchLinksSuccessAction, fetchLinksFailureAction } from \"../../actions/action\";\r\nimport siteUrl from \"../../constants/siteUrl\";\r\nimport dateFormatter from \"../../utils/dateFormatter\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    link: {\r\n      padding: 0,\r\n      textTransform: \"none\",\r\n      color: theme.palette.text.secondary,\r\n      fontWeight: \"normal\",\r\n      textAlign: \"left\",\r\n    },\r\n    cell: {\r\n      [\"@media (max-width:767px)\"]: {\r\n        display: \"none\",\r\n      },\r\n    },\r\n  })\r\n);\r\n\r\ntype PropsType = PropsFromRedux & {\r\n  link: ServiceTypes.IServerResponseLink;\r\n  checkboxHandler: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n  checkboxIsChecked: boolean;\r\n};\r\n\r\nconst LinkElement: React.FC<PropsType> = (props) => {\r\n  const linkService = useContext(ServiceContext)!;\r\n  const classes = useStyles();\r\n  const [formState, setFormState] = useState({ ...initialState });\r\n  const { isEditing, editValue, isLoading } = formState;\r\n  const {\r\n    userState: { user },\r\n    link: { _id, url, title, counter, date, hash },\r\n    checkboxIsChecked,\r\n    checkboxHandler,\r\n    fetchLinksSuccessAction,\r\n    fetchLinksFailureAction,\r\n  } = props;\r\n  const hashedLink = `${siteUrl}/${hash}`;\r\n\r\n  const removeButtonHandler = (): void => {\r\n    const isConfirmed: boolean = window.confirm(\"Подтвердить удаление?\");\r\n    if (isConfirmed) {\r\n      setFormState({ ...initialState, isLoading: true });\r\n      linkService\r\n        .removeLink(_id)\r\n        .then(() =>\r\n          linkService.getLinks(user!._id).then((data) => {\r\n            return fetchLinksSuccessAction(data);\r\n          })\r\n        )\r\n        .catch(fetchLinksFailureAction);\r\n    }\r\n  };\r\n\r\n  const changeInputHandler = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n    setFormState({\r\n      ...initialState,\r\n      isEditing: true,\r\n      editValue: event.target.value,\r\n    });\r\n  };\r\n\r\n  const editButtonHandler = (): void => {\r\n    setFormState({ ...initialState, isEditing: !isEditing });\r\n  };\r\n\r\n  const submitFormHandler = (): void => {\r\n    setFormState({ ...initialState, isLoading: true });\r\n    linkService\r\n      .editLink(_id, editValue)\r\n      .then(() =>\r\n        linkService.getLinks(user!._id).then((data) => {\r\n          fetchLinksSuccessAction(data);\r\n          setFormState({ ...initialState });\r\n        })\r\n      )\r\n      .catch(fetchLinksFailureAction);\r\n  };\r\n\r\n  const copyLinkHandler = (event: React.MouseEvent<HTMLButtonElement>): void => {\r\n    const elem = document.createElement(\"input\");\r\n    elem.value = hashedLink;\r\n    document.body.appendChild(elem);\r\n    elem.select();\r\n    document.execCommand(\"copy\");\r\n    event.currentTarget.textContent = \"Скопировано!\";\r\n    document.body.removeChild(elem);\r\n  };\r\n\r\n  const EditFormElement: JSX.Element = (\r\n    <form onSubmit={submitFormHandler}>\r\n      <Box display=\"flex\" alignItems=\"center\" flexWrap=\"wrap\">\r\n        <TextField\r\n          autoFocus\r\n          value={editValue}\r\n          onChange={changeInputHandler}\r\n          id=\"email\"\r\n          placeholder=\"Введите название\"\r\n          margin=\"normal\"\r\n          type=\"text\"\r\n          inputProps={{ pattern: \"[а-яА-ЯёЁA-Za-z0-9-_\\\\s]*\" }}\r\n          variant=\"outlined\"\r\n          size=\"small\"\r\n        />\r\n\r\n        <Box p={1}>\r\n          <Button type=\"submit\" size=\"small\" color=\"primary\">\r\n            Ок\r\n          </Button>\r\n          <Button onClick={editButtonHandler} size=\"small\" color=\"secondary\">\r\n            Отмена\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n    </form>\r\n  );\r\n\r\n  return (\r\n    <TableRow>\r\n      {isLoading ? (\r\n        <TableCell colSpan={5}> ...Загрузка</TableCell>\r\n      ) : (\r\n        <>\r\n          <TableCell padding=\"none\">\r\n            <Checkbox checked={checkboxIsChecked} onChange={checkboxHandler} id={_id} color=\"default\" />\r\n          </TableCell>\r\n          <TableCell padding=\"none\">\r\n            <Typography title={url} variant=\"body1\" component=\"div\">\r\n              {url.length > 30 ? `${url.slice(0, 30)}...` : url}\r\n            </Typography>\r\n            <Button className={classes.link} title=\"Скопировать\" color=\"default\" onClick={copyLinkHandler}>\r\n              {hashedLink.length > 30 ? `...${hashedLink.slice(hashedLink.length - 30)}` : hashedLink}\r\n            </Button>\r\n            <Typography color=\"textPrimary\" variant=\"body2\" component=\"div\">\r\n              {!isEditing ? title : EditFormElement}\r\n            </Typography>\r\n          </TableCell>\r\n          <TableCell className={classes.cell}>{counter}</TableCell>\r\n          <TableCell className={classes.cell} padding=\"none\">\r\n            {dateFormatter(date)}\r\n          </TableCell>\r\n          <TableCell className={classes.cell} padding=\"none\">\r\n            <Button title=\"Редактировать название\" color=\"primary\" onClick={editButtonHandler}>\r\n              &#9998;\r\n            </Button>\r\n            <Button title=\"Удалить\" color=\"secondary\" onClick={removeButtonHandler}>\r\n              &#10006;\r\n            </Button>\r\n          </TableCell>\r\n        </>\r\n      )}\r\n    </TableRow>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (store: StoreStatesTypes.StoreStateType) => ({\r\n  userState: store.userState,\r\n});\r\nconst mapDispatchToProps = {\r\n  fetchLinksSuccessAction,\r\n  fetchLinksFailureAction,\r\n};\r\n\r\nconst connector = connect(mapStateToProps, mapDispatchToProps);\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\nexport default connector(LinkElement);\r\n","import React, { useEffect, useContext, useState } from \"react\";\r\nimport { connect, ConnectedProps } from \"react-redux\";\r\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Table,\r\n  TableHead,\r\n  TableBody,\r\n  TableRow,\r\n  TableCell,\r\n  Checkbox,\r\n  Button,\r\n  Box,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { StoreStatesTypes } from \"../../types/reduxTypes\";\r\nimport ServiceContext from \"../Context/ServiceContext\";\r\nimport {\r\n  fetchLinksRequestAction,\r\n  fetchLinksSuccessAction,\r\n  fetchLinksFailureAction,\r\n} from \"../../actions/action\";\r\nimport Spinner from \"../Spinner/Spinner\";\r\nimport ErrorComponent from \"../ErrorComponent/ErrorComponent\";\r\nimport LinkElement from \"../LinkElement/LinkElement\";\r\nimport { initialFilterState as initialState } from \"../../store/initialStates\";\r\nimport { ServiceTypes } from \"../../types/appTypes\";\r\n\r\nconst useStyles = makeStyles(() =>\r\n  createStyles({\r\n    button: {\r\n      padding: 0,\r\n    },\r\n    cell: {\r\n      [\"@media (max-width:767px)\"]: {\r\n        display: \"none\",\r\n      },\r\n    },\r\n  })\r\n);\r\n\r\nconst TableComponent: React.FC<PropsFromRedux> = (props) => {\r\n  const linkService = useContext(ServiceContext)!;\r\n  const classes = useStyles();\r\n  const [formCheckboxState, setFormCheckboxState] = useState<string[]>([]);\r\n  const [sorterState, setSorterState] = useState({\r\n    ...initialState,\r\n  });\r\n  const { sorterType, isAscending } = sorterState;\r\n  const {\r\n    fetchLinksRequestAction,\r\n    fetchLinksSuccessAction,\r\n    fetchLinksFailureAction,\r\n    userState: { user },\r\n    linksState: { links, error, isLoading },\r\n  } = props;\r\n  const allCheckboxesAreChecked = links.length === formCheckboxState.length;\r\n\r\n  const sortedLinks = links.sort((a, b) => {\r\n    function sortByType<T>(a: T, b: T, type: string): number {\r\n      switch (type) {\r\n        case \"string\":\r\n          if (a < b) return -1;\r\n          else if (a > b) return 1;\r\n          return 0;\r\n        default:\r\n          return +a - +b;\r\n      }\r\n    }\r\n    switch (sorterType) {\r\n      case \"date\": {\r\n        const item1 = new Date(a[sorterType]!).getTime();\r\n        const item2 = new Date(b[sorterType]!).getTime();\r\n        return isAscending ? sortByType(item1, item2, \"date\") : sortByType(item2, item1, \"date\");\r\n      }\r\n      case \"counter\": {\r\n        const item1 = a[sorterType];\r\n        const item2 = b[sorterType];\r\n        return isAscending ? sortByType(item1, item2, \"number\") : sortByType(item2, item1, \"number\");\r\n      }\r\n      case \"title\": {\r\n        const item1 = a[sorterType]!.toLowerCase();\r\n        const item2 = b[sorterType]!.toLowerCase();\r\n        return isAscending ? sortByType(item1, item2, \"string\") : sortByType(item2, item1, \"string\");\r\n      }\r\n      default:\r\n        return 0;\r\n    }\r\n  });\r\n\r\n  const FilterButton: React.FC<{ buttonType: typeof sorterType }> = (props) => {\r\n    const { buttonType, children } = props;\r\n    const arrow: string = buttonType === sorterType ? (isAscending ? \"▲\" : \"▼\") : \"\";\r\n    return (\r\n      <Button className={classes.button} color=\"default\" onClick={sorterHandler(buttonType)}>\r\n        {children} {arrow}\r\n      </Button>\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (user) {\r\n      fetchLinksRequestAction();\r\n      linkService\r\n        .getLinks(user._id)\r\n        .then((data) => fetchLinksSuccessAction(data))\r\n        .catch(fetchLinksFailureAction);\r\n    }\r\n    return (): void => {\r\n      fetchLinksRequestAction();\r\n    };\r\n  }, [user]);\r\n\r\n  const sorterHandler = (\r\n    sorterButtonType: keyof ServiceTypes.IServerResponseLink\r\n  ): React.MouseEventHandler => (): void => {\r\n    setSorterState({\r\n      sorterType: sorterButtonType,\r\n      isAscending: sorterType === sorterButtonType ? !isAscending : false,\r\n    });\r\n  };\r\n\r\n  const checkboxHandler = (checkboxIsChecked: boolean): React.ChangeEventHandler => (\r\n    event: React.ChangeEvent<HTMLInputElement>\r\n  ) => {\r\n    if (checkboxIsChecked) {\r\n      // Удаляем\r\n      setFormCheckboxState([...formCheckboxState.filter((i) => i !== event.target.id)]);\r\n    } else {\r\n      // Добавляем\r\n      formCheckboxState.push(event.target.id);\r\n      setFormCheckboxState([...formCheckboxState]);\r\n    }\r\n  };\r\n\r\n  const checkboxAllHandler = () => {\r\n    if (!allCheckboxesAreChecked) {\r\n      const newState = links.map((link) => link._id);\r\n      setFormCheckboxState(newState);\r\n    } else {\r\n      setFormCheckboxState([]);\r\n    }\r\n  };\r\n\r\n  const removeManyHandler = () => {\r\n    fetchLinksRequestAction();\r\n    linkService\r\n      .removeLinkMany(formCheckboxState)\r\n      .then(() =>\r\n        linkService.getLinks(user!._id).then((data) => {\r\n          fetchLinksSuccessAction(data);\r\n          setFormCheckboxState([]);\r\n        })\r\n      )\r\n      .catch(fetchLinksFailureAction);\r\n  };\r\n\r\n  if (!user) {\r\n    return (\r\n      <Box p={3}>\r\n        <Typography variant=\"body1\" component=\"div\">\r\n          Вы не авторизованы!\r\n        </Typography>\r\n      </Box>\r\n    );\r\n  } else if (isLoading) {\r\n    return <Spinner />;\r\n  } else if (error) {\r\n    return <ErrorComponent error={error} />;\r\n  } else if (links.length === 0) {\r\n    return (\r\n      <Box p={3}>\r\n        <Typography variant=\"body1\" component=\"div\">\r\n          Вы ещё не добавили ссылок\r\n        </Typography>\r\n      </Box>\r\n    );\r\n  } else {\r\n    return (\r\n      <Box p={1}>\r\n        <Table stickyHeader>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell padding=\"none\">\r\n                <Checkbox\r\n                  title=\"Выделить/снять все\"\r\n                  checked={allCheckboxesAreChecked}\r\n                  onChange={checkboxAllHandler}\r\n                  color=\"default\"\r\n                />\r\n              </TableCell>\r\n              <TableCell title=\"Сортировать по имени\" padding=\"none\">\r\n                <FilterButton buttonType=\"title\">Ссылка</FilterButton>\r\n              </TableCell>\r\n              <TableCell className={classes.cell} title=\"Переходов\" padding=\"none\">\r\n                <FilterButton buttonType=\"counter\">&#10149;</FilterButton>\r\n              </TableCell>\r\n              <TableCell className={classes.cell} padding=\"none\">\r\n                <FilterButton buttonType=\"date\">Дата создания</FilterButton>\r\n              </TableCell>\r\n              <TableCell className={classes.cell} padding=\"none\"></TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {sortedLinks.map((link) => {\r\n              const { _id } = link;\r\n              const checkboxIsChecked: boolean = formCheckboxState.indexOf(_id) !== -1;\r\n              return (\r\n                <LinkElement\r\n                  key={_id}\r\n                  link={link}\r\n                  checkboxHandler={checkboxHandler(checkboxIsChecked)}\r\n                  checkboxIsChecked={checkboxIsChecked}\r\n                />\r\n              );\r\n            })}\r\n          </TableBody>\r\n        </Table>\r\n\r\n        <Box py={2} display=\"flex\" justifyContent=\"flex-end\">\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            disabled={formCheckboxState.length === 0}\r\n            onClick={removeManyHandler}\r\n          >\r\n            Удалить выделенные\r\n          </Button>\r\n        </Box>\r\n      </Box>\r\n    );\r\n  }\r\n};\r\n\r\nconst mapStateToProps = (state: StoreStatesTypes.StoreStateType) => ({\r\n  linksState: state.linksState,\r\n  userState: state.userState,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  fetchLinksRequestAction,\r\n  fetchLinksSuccessAction,\r\n  fetchLinksFailureAction,\r\n};\r\n\r\nconst connector = connect(mapStateToProps, mapDispatchToProps);\r\ntype PropsFromRedux = ConnectedProps<typeof connector>;\r\n\r\nexport default connector(TableComponent);\r\n","import React from \"react\";\r\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport Layout from \"../Layout/Layout\";\r\nimport Head from \"../Head/Head\";\r\nimport TableComponent from \"../TableComponent/TableComponent\";\r\n\r\nconst useStyles = makeStyles(() =>\r\n  createStyles({\r\n    title: {\r\n      margin: \"10px\",\r\n    },\r\n  })\r\n);\r\n\r\nconst LinksPage: React.FC = () => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      <Head>\r\n        <Typography variant=\"h3\" className={classes.title} align=\"center\" component=\"h1\">\r\n          Список ваших ссылок\r\n        </Typography>\r\n      </Head>\r\n      <Layout>\r\n        <TableComponent />\r\n      </Layout>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LinksPage;\r\n","import React from \"react\";\r\nimport { createStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport { Typography } from \"@material-ui/core\";\r\nimport Head from \"../Head/Head\";\r\n\r\nconst useStyles = makeStyles(() =>\r\n  createStyles({\r\n    title: {\r\n      margin: \"10px\",\r\n    },\r\n  })\r\n);\r\n\r\nconst NotFoundPage: React.FC = () => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Head>\r\n      <Typography variant=\"h3\" className={classes.title} align=\"center\" component=\"h1\">\r\n        Ничего не найдено!\r\n      </Typography>\r\n    </Head>\r\n  );\r\n};\r\n\r\nexport default NotFoundPage;\r\n","import React, { useEffect, useContext } from \"react\";\nimport { connect, ConnectedProps } from \"react-redux\";\nimport { Route, Switch } from \"react-router-dom\";\nimport MainPage from \"../MainPage/MainPage\";\nimport LinksPage from \"../LinksPage/LinksPage\";\nimport NotFoundPage from \"../NotFoundPage/NotFoundPage\";\nimport { fetchUserRequestAction, fetchUserSuccessAction } from \"../../actions/action\";\nimport ServiceContext from \"../Context/ServiceContext\";\n\nconst App: React.FC<PropsFromRedux> = (props) => {\n  const linkSrvice = useContext(ServiceContext)!;\n  const { fetchUserRequestAction, fetchUserSuccessAction } = props;\n  // Первичная загрузка пользователя\n  useEffect(() => {\n    fetchUserRequestAction();\n    linkSrvice\n      .getUser()\n      .then(fetchUserSuccessAction)\n      .catch(() => fetchUserSuccessAction(null));\n  }, []);\n\n  return (\n    <Switch>\n      <Route path=\"/\" exact component={MainPage} />\n      <Route path=\"/user/links\" exact component={LinksPage} />\n      <Route component={NotFoundPage} />\n    </Switch>\n  );\n};\n\nconst mapDispatchToProps = {\n  fetchUserRequestAction,\n  fetchUserSuccessAction,\n};\n\nconst connector = connect(null, mapDispatchToProps);\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nexport default connector(App);\n","import { IAction, StoreStatesTypes } from \"../types/reduxTypes\";\r\nimport { initialUserState as initialState } from \"../store/initialStates\";\r\n\r\nconst userReducer = (\r\n  state = initialState,\r\n  action: IAction\r\n): StoreStatesTypes.IUserState => {\r\n  switch (action.type) {\r\n    case \"FETCH_USER_REQUEST\":\r\n      return {\r\n        ...initialState,\r\n        isLoading: true,\r\n      };\r\n    case \"FETCH_USER_SUCCESS\":\r\n      return {\r\n        ...initialState,\r\n        user: action.payload,\r\n      };\r\n    case \"FETCH_USER_FAILURE\":\r\n      return {\r\n        ...initialState,\r\n        error: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default userReducer;\r\n","import { IAction, StoreStatesTypes } from \"../types/reduxTypes\";\r\nimport { initialLinksState as initialState } from \"../store/initialStates\";\r\n\r\nconst userReducer = (\r\n  state = initialState,\r\n  action: IAction\r\n): StoreStatesTypes.ILinksState => {\r\n  switch (action.type) {\r\n    case \"FETCH_LINKS_REQUEST\":\r\n      return {\r\n        ...initialState,\r\n        isLoading: true,\r\n      };\r\n    case \"FETCH_LINKS_SUCCESS\":\r\n      return {\r\n        ...initialState,\r\n        links: action.payload,\r\n      };\r\n    case \"FETCH_LINKS_FAILURE\":\r\n      return {\r\n        ...initialState,\r\n        error: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default userReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport userReducer from \"./userReducer\";\r\nimport linksReducer from \"./linksReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  userState: userReducer,\r\n  linksState: linksReducer,\r\n});\r\n\r\nexport type RootReducerType = typeof rootReducer;\r\nexport default rootReducer;\r\n","import { createStore } from \"redux\";\r\nimport rootReducer from \"../reducers/rootReducer\";\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider as StoreProvider } from \"react-redux\";\nimport dotenv from \"dotenv\";\nimport LinkService from \"./service/LinkService\";\nimport ServiceContext from \"./components/Context/ServiceContext\";\nimport App from \"./components/App/App\";\nimport store from \"./store/store\";\n\ndotenv.config();\nconst linkService = new LinkService();\n\nReactDOM.render(\n  <React.StrictMode>\n    <StoreProvider store={store}>\n      <ServiceContext.Provider value={linkService}>\n        <BrowserRouter>\n          <App />\n        </BrowserRouter>\n      </ServiceContext.Provider>\n    </StoreProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}